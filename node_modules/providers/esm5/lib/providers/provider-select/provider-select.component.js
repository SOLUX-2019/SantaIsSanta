import { __decorate } from "tslib";
import { Component, Input } from '@angular/core';
import { Router } from '@angular/router';
import { StreamActivity, StreamClientService } from '@brightpath/activity-stream';
import { CustomerService, ProvidersService } from '@brightpath/scheduling';
var ProviderSelectComponent = /** @class */ (function () {
    function ProviderSelectComponent(providerService, customerService, streamClient, router) {
        this.providerService = providerService;
        this.customerService = customerService;
        this.streamClient = streamClient;
        this.router = router;
        this.loading = false;
        this.providers = [];
    }
    ProviderSelectComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.customer === null || this.customer === undefined) {
            // load the customer
            this.customerService.loadCustomer(this.customerId).subscribe(function (customerList) {
                if (customerList !== null && customerList.length > 0) {
                    _this.customer = customerList[0];
                }
            });
        }
        this.loadProviders();
    };
    ProviderSelectComponent.prototype.loadProviders = function () {
        var _this = this;
        this.providerService.getAllProviders().then(function (providers) {
            console.log(providers);
            _this.providers = providers;
        });
    };
    ProviderSelectComponent.prototype.onProviderSelected = function (newProvider) {
        var _this = this;
        console.log('the user wants this guy: ', newProvider);
        if (this.customer.preferredProvider !== null && this.customer.preferredProvider !== undefined) {
            // this person is switching providers.  Create an activity and CC it to the old provider's notification stream
            this.streamClient.getToken('timeline', this.customer.id).then(function (response) {
                var token = response.token;
                var activity = new StreamActivity();
                activity.verb = 'cancelprovider';
                activity.actor = "customers:" + _this.customer.id;
                activity.target = "providers:" + _this.customer.preferredProvider;
                activity.to = ["notification:" + _this.customer.preferredProvider];
                activity.object = 'none';
                console.log('about to create the following', activity);
                _this.streamClient.addActivity(activity, 'timeline', _this.customer.id, token);
            });
        }
        this.customer.preferredProvider = newProvider.id;
        // TODO: Need to signal that the preferred provider has changed
        // this.auth.saveAuthIdentityToLocalStorage();
        this.customerService.saveCustomer(this.customer)
            .subscribe(function (response) {
            _this.streamClient.getToken('timeline', _this.customer.id).then(function (tokenresponse) {
                console.log('got the ticket honkey dorey');
                var token = tokenresponse.token;
                var activity = new StreamActivity();
                activity.verb = 'preferredprovider';
                activity.actor = "customers:" + _this.customer.id;
                activity.target = "providers:" + _this.customer.preferredProvider;
                activity.to = ["notification:" + _this.customer.preferredProvider];
                activity.object = 'none';
                console.log('about to create the following', activity);
                _this.streamClient.addActivity(activity, 'timeline', _this.customer.id, token);
                // now follow the new provider
                _this.streamClient.follow(_this.customer.id, 'timeline', _this.customer.preferredProvider, 'providers');
            });
            // TODO: This shouldn't navigate, but should instead emit an event
            _this.router.navigateByUrl('home');
        });
    };
    ProviderSelectComponent.ctorParameters = function () { return [
        { type: ProvidersService },
        { type: CustomerService },
        { type: StreamClientService },
        { type: Router }
    ]; };
    __decorate([
        Input()
    ], ProviderSelectComponent.prototype, "customerId", void 0);
    __decorate([
        Input()
    ], ProviderSelectComponent.prototype, "customer", void 0);
    ProviderSelectComponent = __decorate([
        Component({
            selector: 'provider-select',
            template: "<div fxLayout=\"column\" class=\"page-layout blank p-24\" fxLayoutGap=\"16px\" fusePerfectScrollbar>\n  <div fxLayout=\"row\" fxLayoutWrap fxLayoutGap=\"16px\">\n    <provider-widget (onSelectedProvider)=\"onProviderSelected($event)\" fxFlex=\"25\" class=\"mb-16\" *ngFor=\"let provider of providers\" [provider]=\"provider\"></provider-widget>\n  </div>\n</div>\n",
            styles: [""]
        })
    ], ProviderSelectComponent);
    return ProviderSelectComponent;
}());
export { ProviderSelectComponent };
//# sourceMappingURL=data:application/json;base64,