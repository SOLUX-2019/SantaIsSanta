import { __decorate } from "tslib";
import { Component, Input } from '@angular/core';
import { Router } from '@angular/router';
import { StreamActivity, StreamClientService } from '@brightpath/activity-stream';
import { CustomerService, ProvidersService } from '@brightpath/scheduling';
let ProviderSelectComponent = class ProviderSelectComponent {
    constructor(providerService, customerService, streamClient, router) {
        this.providerService = providerService;
        this.customerService = customerService;
        this.streamClient = streamClient;
        this.router = router;
        this.loading = false;
        this.providers = [];
    }
    ngOnInit() {
        if (this.customer === null || this.customer === undefined) {
            // load the customer
            this.customerService.loadCustomer(this.customerId).subscribe((customerList) => {
                if (customerList !== null && customerList.length > 0) {
                    this.customer = customerList[0];
                }
            });
        }
        this.loadProviders();
    }
    loadProviders() {
        this.providerService.getAllProviders().then((providers) => {
            console.log(providers);
            this.providers = providers;
        });
    }
    onProviderSelected(newProvider) {
        console.log('the user wants this guy: ', newProvider);
        if (this.customer.preferredProvider !== null && this.customer.preferredProvider !== undefined) {
            // this person is switching providers.  Create an activity and CC it to the old provider's notification stream
            this.streamClient.getToken('timeline', this.customer.id).then((response) => {
                const token = response.token;
                const activity = new StreamActivity();
                activity.verb = 'cancelprovider';
                activity.actor = `customers:${this.customer.id}`;
                activity.target = `providers:${this.customer.preferredProvider}`;
                activity.to = [`notification:${this.customer.preferredProvider}`];
                activity.object = 'none';
                console.log('about to create the following', activity);
                this.streamClient.addActivity(activity, 'timeline', this.customer.id, token);
            });
        }
        this.customer.preferredProvider = newProvider.id;
        // TODO: Need to signal that the preferred provider has changed
        // this.auth.saveAuthIdentityToLocalStorage();
        this.customerService.saveCustomer(this.customer)
            .subscribe((response) => {
            this.streamClient.getToken('timeline', this.customer.id).then((tokenresponse) => {
                console.log('got the ticket honkey dorey');
                const token = tokenresponse.token;
                const activity = new StreamActivity();
                activity.verb = 'preferredprovider';
                activity.actor = `customers:${this.customer.id}`;
                activity.target = `providers:${this.customer.preferredProvider}`;
                activity.to = [`notification:${this.customer.preferredProvider}`];
                activity.object = 'none';
                console.log('about to create the following', activity);
                this.streamClient.addActivity(activity, 'timeline', this.customer.id, token);
                // now follow the new provider
                this.streamClient.follow(this.customer.id, 'timeline', this.customer.preferredProvider, 'providers');
            });
            // TODO: This shouldn't navigate, but should instead emit an event
            this.router.navigateByUrl('home');
        });
    }
};
ProviderSelectComponent.ctorParameters = () => [
    { type: ProvidersService },
    { type: CustomerService },
    { type: StreamClientService },
    { type: Router }
];
__decorate([
    Input()
], ProviderSelectComponent.prototype, "customerId", void 0);
__decorate([
    Input()
], ProviderSelectComponent.prototype, "customer", void 0);
ProviderSelectComponent = __decorate([
    Component({
        selector: 'provider-select',
        template: "<div fxLayout=\"column\" class=\"page-layout blank p-24\" fxLayoutGap=\"16px\" fusePerfectScrollbar>\n  <div fxLayout=\"row\" fxLayoutWrap fxLayoutGap=\"16px\">\n    <provider-widget (onSelectedProvider)=\"onProviderSelected($event)\" fxFlex=\"25\" class=\"mb-16\" *ngFor=\"let provider of providers\" [provider]=\"provider\"></provider-widget>\n  </div>\n</div>\n",
        styles: [""]
    })
], ProviderSelectComponent);
export { ProviderSelectComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItc2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3Byb3ZpZGVycy8iLCJzb3VyY2VzIjpbImxpYi9wcm92aWRlcnMvcHJvdmlkZXItc2VsZWN0L3Byb3ZpZGVyLXNlbGVjdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEVBQUMsY0FBYyxFQUFFLG1CQUFtQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDaEYsT0FBTyxFQUFDLGVBQWUsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBUXpFLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBT2xDLFlBQ1UsZUFBaUMsRUFDakMsZUFBZ0MsRUFDaEMsWUFBaUMsRUFDakMsTUFBYztRQUhkLG9CQUFlLEdBQWYsZUFBZSxDQUFrQjtRQUNqQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBQ2pDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFQeEIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixjQUFTLEdBQUcsRUFBRSxDQUFDO0lBTWEsQ0FBQztJQUU3QixRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUN6RCxvQkFBb0I7WUFDcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQXdCLEVBQUUsRUFBRTtnQkFDeEYsSUFBSSxZQUFZLEtBQUssSUFBSSxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUNwRCxJQUFJ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USxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztnQkFDbEUsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3ZELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBRTdFLDhCQUE4QjtnQkFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDdkcsQ0FBQyxDQUFDLENBQUM7WUFFSCxrRUFBa0U7WUFDbEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBRUYsQ0FBQTs7WUFwRTRCLGdCQUFnQjtZQUNoQixlQUFlO1lBQ2xCLG1CQUFtQjtZQUN6QixNQUFNOztBQVRmO0lBQVIsS0FBSyxFQUFFOzJEQUFZO0FBQ1g7SUFBUixLQUFLLEVBQUU7eURBQVU7QUFIUCx1QkFBdUI7SUFMbkMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQix3WEFBK0M7O0tBRWhELENBQUM7R0FDVyx1QkFBdUIsQ0E0RW5DO1NBNUVZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgT25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Um91dGVyfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtTdHJlYW1BY3Rpdml0eSwgU3RyZWFtQ2xpZW50U2VydmljZX0gZnJvbSAnQGJyaWdodHBhdGgvYWN0aXZpdHktc3RyZWFtJztcbmltcG9ydCB7Q3VzdG9tZXJTZXJ2aWNlLCBQcm92aWRlcnNTZXJ2aWNlfSBmcm9tICdAYnJpZ2h0cGF0aC9zY2hlZHVsaW5nJztcbmltcG9ydCB7Q3VzdG9tZXJ9IGZyb20gJ0BicmlnaHRwYXRoL2NvbW1vbic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3Byb3ZpZGVyLXNlbGVjdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wcm92aWRlci1zZWxlY3QuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9wcm92aWRlci1zZWxlY3QuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBQcm92aWRlclNlbGVjdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCkgY3VzdG9tZXJJZDtcbiAgQElucHV0KCkgY3VzdG9tZXI7XG4gIGxvYWRpbmcgPSBmYWxzZTtcbiAgcHJvdmlkZXJzID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBwcm92aWRlclNlcnZpY2U6IFByb3ZpZGVyc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBjdXN0b21lclNlcnZpY2U6IEN1c3RvbWVyU2VydmljZSxcbiAgICBwcml2YXRlIHN0cmVhbUNsaWVudDogU3RyZWFtQ2xpZW50U2VydmljZSxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5jdXN0b21lciA9PT0gbnVsbCB8fCB0aGlzLmN1c3RvbWVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGxvYWQgdGhlIGN1c3RvbWVyXG4gICAgICB0aGlzLmN1c3RvbWVyU2VydmljZS5sb2FkQ3VzdG9tZXIodGhpcy5jdXN0b21lcklkKS5zdWJzY3JpYmUoKGN1c3RvbWVyTGlzdDogQ3VzdG9tZXJbXSkgPT4ge1xuICAgICAgICBpZiAoY3VzdG9tZXJMaXN0ICE9PSBudWxsICYmIGN1c3RvbWVyTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5jdXN0b21lciA9IGN1c3RvbWVyTGlzdFswXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMubG9hZFByb3ZpZGVycygpO1xuICB9XG5cbiAgbG9hZFByb3ZpZGVycygpIHtcbiAgICB0aGlzLnByb3ZpZGVyU2VydmljZS5nZXRBbGxQcm92aWRlcnMoKS50aGVuKChwcm92aWRlcnM6IGFueVtdKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhwcm92aWRlcnMpO1xuICAgICAgdGhpcy5wcm92aWRlcnMgPSBwcm92aWRlcnM7XG4gICAgfSk7XG5cbiAgfVxuXG4gIG9uUHJvdmlkZXJTZWxlY3RlZChuZXdQcm92aWRlcikge1xuICAgIGNvbnNvbGUubG9nKCd0aGUgdXNlciB3YW50cyB0aGlzIGd1eTogJywgbmV3UHJvdmlkZXIpO1xuICAgIGlmICh0aGlzLmN1c3RvbWVyLnByZWZlcnJlZFByb3ZpZGVyICE9PSBudWxsICYmIHRoaXMuY3VzdG9tZXIucHJlZmVycmVkUHJvdmlkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gdGhpcyBwZXJzb24gaXMgc3dpdGNoaW5nIHByb3ZpZGVycy4gIENyZWF0ZSBhbiBhY3Rpdml0eSBhbmQgQ0MgaXQgdG8gdGhlIG9sZCBwcm92aWRlcidzIG5vdGlmaWNhdGlvbiBzdHJlYW1cbiAgICAgIHRoaXMuc3RyZWFtQ2xpZW50LmdldFRva2VuKCd0aW1lbGluZScsIHRoaXMuY3VzdG9tZXIuaWQpLnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSByZXNwb25zZS50b2tlbjtcbiAgICAgICAgY29uc3QgYWN0aXZpdHk6IFN0cmVhbUFjdGl2aXR5ID0gbmV3IFN0cmVhbUFjdGl2aXR5KCk7XG4gICAgICAgIGFjdGl2aXR5LnZlcmIgPSAnY2FuY2VscHJvdmlkZXInO1xuICAgICAgICBhY3Rpdml0eS5hY3RvciA9IGBjdXN0b21lcnM6JHt0aGlzLmN1c3RvbWVyLmlkfWA7XG4gICAgICAgIGFjdGl2aXR5LnRhcmdldCA9IGBwcm92aWRlcnM6JHt0aGlzLmN1c3RvbWVyLnByZWZlcnJlZFByb3ZpZGVyfWA7XG4gICAgICAgIGFjdGl2aXR5LnRvID0gW2Bub3RpZmljYXRpb246JHt0aGlzLmN1c3RvbWVyLnByZWZlcnJlZFByb3ZpZGVyfWBdO1xuICAgICAgICBhY3Rpdml0eS5vYmplY3QgPSAnbm9uZSc7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhYm91dCB0byBjcmVhdGUgdGhlIGZvbGxvd2luZycsIGFjdGl2aXR5KTtcbiAgICAgICAgdGhpcy5zdHJlYW1DbGllbnQuYWRkQWN0aXZpdHkoYWN0aXZpdHksICd0aW1lbGluZScsIHRoaXMuY3VzdG9tZXIuaWQsIHRva2VuKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmN1c3RvbWVyLnByZWZlcnJlZFByb3ZpZGVyID0gbmV3UHJvdmlkZXIuaWQ7XG4gICAgLy8gVE9ETzogTmVlZCB0byBzaWduYWwgdGhhdCB0aGUgcHJlZmVycmVkIHByb3ZpZGVyIGhhcyBjaGFuZ2VkXG4gICAgLy8gdGhpcy5hdXRoLnNhdmVBdXRoSWRlbnRpdHlUb0xvY2FsU3RvcmFnZSgpO1xuICAgIHRoaXMuY3VzdG9tZXJTZXJ2aWNlLnNhdmVDdXN0b21lcih0aGlzLmN1c3RvbWVyKVxuICAgICAgLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcblxuICAgICAgICB0aGlzLnN0cmVhbUNsaWVudC5nZXRUb2tlbigndGltZWxpbmUnLCB0aGlzLmN1c3RvbWVyLmlkKS50aGVuKCh0b2tlbnJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZ290IHRoZSB0aWNrZXQgaG9ua2V5IGRvcmV5Jyk7XG4gICAgICAgICAgY29uc3QgdG9rZW4gPSB0b2tlbnJlc3BvbnNlLnRva2VuO1xuICAgICAgICAgIGNvbnN0IGFjdGl2aXR5OiBTdHJlYW1BY3Rpdml0eSA9IG5ldyBTdHJlYW1BY3Rpdml0eSgpO1xuICAgICAgICAgIGFjdGl2aXR5LnZlcmIgPSAncHJlZmVycmVkcHJvdmlkZXInO1xuICAgICAgICAgIGFjdGl2aXR5LmFjdG9yID0gYGN1c3RvbWVyczoke3RoaXMuY3VzdG9tZXIuaWR9YDtcbiAgICAgICAgICBhY3Rpdml0eS50YXJnZXQgPSBgcHJvdmlkZXJzOiR7dGhpcy5jdXN0b21lci5wcmVmZXJyZWRQcm92aWRlcn1gO1xuICAgICAgICAgIGFjdGl2aXR5LnRvID0gW2Bub3RpZmljYXRpb246JHt0aGlzLmN1c3RvbWVyLnByZWZlcnJlZFByb3ZpZGVyfWBdO1xuICAgICAgICAgIGFjdGl2aXR5Lm9iamVjdCA9ICdub25lJztcbiAgICAgICAgICBjb25zb2xlLmxvZygnYWJvdXQgdG8gY3JlYXRlIHRoZSBmb2xsb3dpbmcnLCBhY3Rpdml0eSk7XG4gICAgICAgICAgdGhpcy5zdHJlYW1DbGllbnQuYWRkQWN0aXZpdHkoYWN0aXZpdHksICd0aW1lbGluZScsIHRoaXMuY3VzdG9tZXIuaWQsIHRva2VuKTtcblxuICAgICAgICAgIC8vIG5vdyBmb2xsb3cgdGhlIG5ldyBwcm92aWRlclxuICAgICAgICAgIHRoaXMuc3RyZWFtQ2xpZW50LmZvbGxvdyh0aGlzLmN1c3RvbWVyLmlkLCAndGltZWxpbmUnLCB0aGlzLmN1c3RvbWVyLnByZWZlcnJlZFByb3ZpZGVyLCAncHJvdmlkZXJzJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkbid0IG5hdmlnYXRlLCBidXQgc2hvdWxkIGluc3RlYWQgZW1pdCBhbiBldmVudFxuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKCdob21lJyk7XG4gICAgICB9KTtcbiAgfVxuXG59XG4iXX0=