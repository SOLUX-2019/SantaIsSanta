import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
let StarRatingComponent = class StarRatingComponent {
    constructor(snackBar) {
        this.snackBar = snackBar;
        this.ratingUpdated = new EventEmitter();
        this.snackBarDuration = 2000;
        this.ratingArr = [];
    }
    ngOnInit() {
        for (let index = 0; index < this.starCount; index++) {
            this.ratingArr.push(index);
        }
    }
    onClick(rating) {
        console.log(rating);
        this.ratingUpdated.emit(rating);
        return false;
    }
    showRatingLabel(level) {
        let result = '';
        switch (level) {
            case 1:
                result = 'Poor';
                break;
            case 2:
                result = 'Not Good';
                break;
            case 3:
                result = 'Fine';
                break;
            case 4:
                result = 'Really Good';
                break;
            case 5:
                result = 'Excellent';
                break;
        }
        return result;
    }
    showIcon(index) {
        if (this.rating >= index + 1) {
            return 'star';
        }
        else {
            return 'star_border';
        }
    }
};
StarRatingComponent.ctorParameters = () => [
    { type: MatSnackBar }
];
__decorate([
    Input('rating')
], StarRatingComponent.prototype, "rating", void 0);
__decorate([
    Input('starCount')
], StarRatingComponent.prototype, "starCount", void 0);
__decorate([
    Input('color')
], StarRatingComponent.prototype, "color", void 0);
__decorate([
    Output()
], StarRatingComponent.prototype, "ratingUpdated", void 0);
StarRatingComponent = __decorate([
    Component({
        selector: 'mat-star-rating',
        template: "<button mat-icon-button [color]=\"color\" *ngFor=\"let ratingId of ratingArr;index as i\" [id]=\"'star_'+i\" (click)=\"onClick(i+1)\" [matTooltip]=\"showRatingLabel(ratingId+1)\" matTooltipPosition=\"above\">\n  <mat-icon class=\"yellow-icon\">\n    {{showIcon(i)}}\n  </mat-icon>\n</button>\n<mat-error *ngIf=\"starCount == null || starCount == 0\">\n  Star count is <strong>required</strong> and cannot be zero\n</mat-error>\n",
        encapsulation: ViewEncapsulation.Emulated,
        styles: ["button{height:20px;width:25px;line-height:20px}.yellow-icon{color:#fdd835}.yellow-icon svg{fill:#fdd835}"]
    })
], StarRatingComponent);
export { StarRatingComponent };
export var StarRatingColor;
(function (StarRatingColor) {
    StarRatingColor["primary"] = "primary";
    StarRatingColor["accent"] = "accent";
    StarRatingColor["warn"] = "warn";
})(StarRatingColor || (StarRatingColor = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci1yYXRpbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcHJvdmlkZXJzLyIsInNvdXJjZXMiOlsibGliL3Byb3ZpZGVycy9zdGFyLXJhdGluZy9zdGFyLXJhdGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBUTFELElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0lBVTlCLFlBQW9CLFFBQXFCO1FBQXJCLGFBQVEsR0FBUixRQUFRLENBQWE7UUFMdkIsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTdDLHFCQUFnQixHQUFHLElBQUksQ0FBQztRQUN6QixjQUFTLEdBQUcsRUFBRSxDQUFDO0lBR3RCLENBQUM7SUFHRCxRQUFRO1FBQ04sS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDbkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBQ0QsT0FBTyxDQUFDLE1BQWM7UUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoQyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBYTtRQUMzQixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsUUFBUSxLQUFLLEVBQUU7WUFDYixLQUFLLENBQUM7Z0JBQUUsTUFBTSxHQUFHLE1BQU0sQ0FBQztnQkFBQyxNQUFNO1lBQy9CLEtBQUssQ0FBQztnQkFBRSxNQUFNLEdBQUcsVUFBVSxDQUFDO2dCQUFDLE1BQU07WUFDbkMsS0FBSyxDQUFDO2dCQUFFLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQUMsTUFBTTtZQUMvQixLQUFLLENBQUM7Z0JBQUUsTUFBTSxHQUFHLGFBQWEsQ0FBQztnQkFBQyxNQUFNO1lBQ3RDLEtBQUssQ0FBQztnQkFBRSxNQUFNLEdBQUcsV0FBVyxDQUFDO2dCQUFDLE1BQU07U0FDckM7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDNUIsT0FBTyxNQUFNLENBQUM7U0FDZjthQUFNO1lBQ0wsT0FBTyxhQUFhLENBQUM7U0FDdEI7SUFDSCxDQUFDO0NBRUYsQ0FBQTs7WUFuQytCLFdBQVc7O0FBUnhCO0lBQWhCLEtBQUssQ0FBQyxRQUFRLENBQUM7bURBQXdCO0FBQ3BCO0lBQW5CLEtBQUssQ0FBQyxXQUFXLENBQUM7c0RBQTBCO0FBQzdCO0lBQWYsS0FBSyxDQUFDLE9BQU8sQ0FBQztrREFBZTtBQUNwQjtJQUFULE1BQU0sRUFBRTswREFBNEM7QUFMMUMsbUJBQW1CO0lBTi9CLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxpQkFBaUI7UUFDM0Isd2JBQTJDO1FBRTNDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxRQUFROztLQUMxQyxDQUFDO0dBQ1csbUJBQW1CLENBNkMvQjtTQTdDWSxtQkFBbUI7QUE4Q2hDLE1BQU0sQ0FBTixJQUFZLGVBSVg7QUFKRCxXQUFZLGVBQWU7SUFDekIsc0NBQW1CLENBQUE7SUFDbkIsb0NBQWlCLENBQUE7SUFDakIsZ0NBQWEsQ0FBQTtBQUNmLENBQUMsRUFKVyxlQUFlLEtBQWYsZUFBZSxRQUkxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRTbmFja0JhciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NuYWNrLWJhcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21hdC1zdGFyLXJhdGluZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9zdGFyLXJhdGluZy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3N0YXItcmF0aW5nLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLkVtdWxhdGVkXG59KVxuZXhwb3J0IGNsYXNzIFN0YXJSYXRpbmdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgncmF0aW5nJykgcHJpdmF0ZSByYXRpbmc6IG51bWJlcjtcbiAgQElucHV0KCdzdGFyQ291bnQnKSBwdWJsaWMgc3RhckNvdW50OiBudW1iZXI7XG4gIEBJbnB1dCgnY29sb3InKSBjb2xvcjogc3RyaW5nO1xuICBAT3V0cHV0KCkgcHJpdmF0ZSByYXRpbmdVcGRhdGVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHByaXZhdGUgc25hY2tCYXJEdXJhdGlvbiA9IDIwMDA7XG4gIHB1YmxpYyByYXRpbmdBcnIgPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNuYWNrQmFyOiBNYXRTbmFja0Jhcikge1xuICB9XG5cblxuICBuZ09uSW5pdCgpIHtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zdGFyQ291bnQ7IGluZGV4KyspIHtcbiAgICAgIHRoaXMucmF0aW5nQXJyLnB1c2goaW5kZXgpO1xuICAgIH1cbiAgfVxuICBvbkNsaWNrKHJhdGluZzogbnVtYmVyKSB7XG4gICAgY29uc29sZS5sb2cocmF0aW5nKTtcbiAgICB0aGlzLnJhdGluZ1VwZGF0ZWQuZW1pdChyYXRpbmcpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHNob3dSYXRpbmdMYWJlbChsZXZlbDogbnVtYmVyKXtcbiAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgc3dpdGNoIChsZXZlbCkge1xuICAgICAgY2FzZSAxOiByZXN1bHQgPSAnUG9vcic7IGJyZWFrO1xuICAgICAgY2FzZSAyOiByZXN1bHQgPSAnTm90IEdvb2QnOyBicmVhaztcbiAgICAgIGNhc2UgMzogcmVzdWx0ID0gJ0ZpbmUnOyBicmVhaztcbiAgICAgIGNhc2UgNDogcmVzdWx0ID0gJ1JlYWxseSBHb29kJzsgYnJlYWs7XG4gICAgICBjYXNlIDU6IHJlc3VsdCA9ICdFeGNlbGxlbnQnOyBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHNob3dJY29uKGluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5yYXRpbmcgPj0gaW5kZXggKyAxKSB7XG4gICAgICByZXR1cm4gJ3N0YXInO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ3N0YXJfYm9yZGVyJztcbiAgICB9XG4gIH1cblxufVxuZXhwb3J0IGVudW0gU3RhclJhdGluZ0NvbG9yIHtcbiAgcHJpbWFyeSA9ICdwcmltYXJ5JyxcbiAgYWNjZW50ID0gJ2FjY2VudCcsXG4gIHdhcm4gPSAnd2Fybidcbn1cbiJdfQ==