import { __decorate } from 'tslib';
import { EventEmitter, ChangeDetectorRef, Input, Output, Component, ViewEncapsulation, Pipe, ContentChild, TemplateRef, NgModule } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Provider } from '@brightpath/common';
import { ProvidersService, CustomerService } from '@brightpath/scheduling';
import { Router, ActivatedRoute } from '@angular/router';
import { MatSnackBar } from '@angular/material/snack-bar';
import * as moment from 'moment';
import { FormControl, Validators, ReactiveFormsModule } from '@angular/forms';
import { UUID } from 'angular2-uuid';
import { StreamClientService, StreamActivity } from '@brightpath/activity-stream';
import { CommonModule } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
import { FlexLayoutModule } from '@angular/flex-layout';
import { AuthModule } from 'auth';
import { MaterialModule } from 'common';
import { SchedulingModule } from 'scheduling';
import { ActivityStreamModule } from 'activity-stream';

var ProviderWidgetComponent = /** @class */ (function () {
    function ProviderWidgetComponent(providerService, http, cdr) {
        this.providerService = providerService;
        this.http = http;
        this.cdr = cdr;
        this.provider = new Provider({ id: 'unknown' });
        this.designatedProvider = false;
        this.onAppointmentCreated = new EventEmitter();
        this.onSelectedProvider = new EventEmitter();
        // tslint:disable-next-line:variable-name
        this._showAvailability = false;
        this.availabilityLoaded = false;
        this.showRating = false;
        this.showDetails = false;
        this.showPrivateMessage = false;
        this.loaded = false;
    }
    ProviderWidgetComponent.prototype.selectProvider = function (value) {
        console.log(value);
        if (value.checked) {
            this.onSelectedProvider.emit(this.provider);
        }
    };
    ProviderWidgetComponent.prototype.appointmentCreated = function (appointment) {
        this.onAppointmentCreated.emit(appointment);
    };
    ProviderWidgetComponent.prototype.clearAvailability = function () {
        this.showAvailability = false;
        this.availabilityLoaded = false;
    };
    ProviderWidgetComponent.prototype.onAvailabilityLoaded = function (event) {
        console.log('bam.  loaded');
        this.availabilityLoaded = true;
        this.cdr.detectChanges();
    };
    Object.defineProperty(ProviderWidgetComponent.prototype, "showAvailability", {
        get: function () {
            return this._showAvailability;
        },
        set: function (availability) {
            this._showAvailability = availability;
            this.cdr.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    ProviderWidgetComponent.prototype.onRatingSaved = function (event) {
        this.showRating = false;
        this.cdr.detectChanges();
    };
    ProviderWidgetComponent.prototype.ngOnInit = function () {
        var _this = this;
        // load the survey results for the provider
        if (this.provider.id === 'unknown') {
            this.providerService.getProviderById(this.providerId)
                .then(function (response) {
                _this.provider = response;
                _this.cdr.detectChanges();
            }, function (error) {
                console.log('An error occurred');
            });
        }
        else {
            this.providerId = this.provider.id;
        }
        var surveyUrl = "https://api-dev.brightpathvt.com/providers/surveyresults/" + this.providerId;
        this.http.get(surveyUrl)
            .subscribe(function (response) {
            _this.loaded = true;
            _this.providerDetails = response;
            console.log('details', response);
            // const licenses: any[] = this.providerDetails.licenses;
            // const licenseString = licenses.map((license: any) => {
            //   console.log('license', license);
            //   return license.name;
            // }).join(',');
            // console.log('licenseString', licenseString);
            _this.cdr.detectChanges();
        }, function (error) {
            _this.loaded = true;
            console.log('An error occurred');
            console.log(error);
        });
    };
    ProviderWidgetComponent.ctorParameters = function () { return [
        { type: ProvidersService },
        { type: HttpClient },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], ProviderWidgetComponent.prototype, "provider", void 0);
    __decorate([
        Input()
    ], ProviderWidgetComponent.prototype, "providerId", void 0);
    __decorate([
        Input()
    ], ProviderWidgetComponent.prototype, "designatedProvider", void 0);
    __decorate([
        Output()
    ], ProviderWidgetComponent.prototype, "onAppointmentCreated", void 0);
    __decorate([
        Output()
    ], ProviderWidgetComponent.prototype, "onSelectedProvider", void 0);
    ProviderWidgetComponent = __decorate([
        Component({
            selector: 'provider-widget',
            template: "<mat-card fxLayout=\"column\" class=\"p-0\">\n\n  <!-- Front -->\n  <div class=\"mat-white-bg mat-elevation-z2\">\n    <div fxLayout=\"row\" *ngIf=\"!designatedProvider\" class=\"p-16 mb-24 bb\">\n      <div class=\"mr-16\">\n        <mat-checkbox (change)=\"selectProvider($event)\"></mat-checkbox>\n      </div>\n      <div fxLayout=\"column\">\n        <div>Choose {{provider?.firstName}} as your preferred provider</div>\n      </div>\n    </div>\n    <div *ngIf=\"!showAvailability && !showRating && !showDetails && !showPrivateMessage\" class=\"mb-8\" fxLayout=\"column\">\n      <div *ngIf=\"designatedProvider\" class=\"font-size-18 text-center p-16 mb-24 bb\">\n        Your Counselor\n      </div>\n      <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n        <div>\n          <img *ngIf=\"loaded\" src=\"{{ provider?.imageUrl }}\" style=\"border-radius: 50%; width: 150px;\">\n          <mat-progress-spinner *ngIf=\"!loaded\" [strokeWidth]=\"4\" [diameter]=\"150\" mode=\"indeterminate\" class=\"mb-16\"></mat-progress-spinner>\n        </div>\n        <div *ngIf=\"loaded\" class=\"mt-24 mb-8\">\n          <div class=\"secondary-text font-size-18\">{{ provider?.firstName }} {{ provider?.lastName }}</div>\n        </div>\n        <div *ngIf=\"loaded\" class=\"text-center mb-16\" fxLayoutAlign=\"row\">\n          <mat-icon class=\"yellow-icon\">star</mat-icon>\n          <mat-icon class=\"yellow-icon\">star</mat-icon>\n          <mat-icon class=\"yellow-icon\">star</mat-icon>\n          <mat-icon class=\"yellow-icon\">star</mat-icon>\n          <mat-icon class=\"yellow-icon\">star</mat-icon>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"showAvailability\" class=\"pt-8\" fxLayout=\"column\">\n      <div  *ngIf=\"designatedProvider\" class=\"mb-8\" fxLayout=\"row\">\n        <div fxFlex class=\"bb pb-8 pl-16 mat-title\">Your Counselor</div>\n      </div>\n      <div fxLayout=\"column\" class=\"mb-16\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n          <mat-spinner class=\"ml-8 mr-8\" *ngIf=\"!availabilityLoaded\" [diameter]=\"25\"></mat-spinner>\n          <button *ngIf=\"availabilityLoaded\" mat-icon-button (click)=\"clearAvailability()\">\n            <mat-icon aria-label=\"Example icon-button with a heart icon\">arrow_back</mat-icon>\n          </button>\n          <div fxLayoutAlign=\"column\" class=\"mr-8 ml-8\">\n            <img src=\"{{ provider?.imageUrl }}\" style=\"border-radius: 50%; width: 40px; height: 40px;\">\n          </div>\n          <div fxLayout=\"column\">\n            <div class=\"secondary-text font-size-18 line-height-14\">{{ provider?.firstName }}</div>\n            <div class=\"secondary-text font-size-24\">{{ provider?.lastName }}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"showRating\" class=\"pt-8\" fxLayout=\"column\">\n      <div *ngIf=\"designatedProvider\" class=\"mb-8\" fxLayout=\"row\">\n        <div fxFlex class=\"bb pb-8 pl-16 mat-title\">Your Counselor</div>\n      </div>\n      <div fxLayout=\"column\" class=\"mb-16\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n          <button mat-icon-button (click)=\"showRating = false;\">\n            <mat-icon aria-label=\"Cancel\">arrow_back</mat-icon>\n          </button>\n          <div fxLayoutAlign=\"column\" class=\"mr-8 ml-8\">\n            <img src=\"{{ provider?.imageUrl }}\" style=\"border-radius: 50%; width: 40px; height: 40px;\">\n          </div>\n          <div fxLayoutAlign=\"row\" class=\"secondary-text font-size-24\">Rate {{ provider?.firstName }}</div>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"showDetails\" class=\"pt-8\" fxLayout=\"column\">\n      <div *ngIf=\"designatedProvider\" class=\"mb-8\" fxLayout=\"row\">\n        <div fxFlex class=\"bb pb-8 pl-16 mat-title\">Your Counselor</div>\n      </div>\n      <div fxLayout=\"column\" class=\"mb-16\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n          <button mat-icon-button (click)=\"showDetails = false;\">\n            <mat-icon aria-label=\"Cancel\">arrow_back</mat-icon>\n          </button>\n          <div fxLayoutAlign=\"column\" class=\"mr-8 ml-8\">\n            <img src=\"{{ provider?.imageUrl }}\" style=\"border-radius: 50%; width: 40px; height: 40px;\">\n          </div>\n          <div fxLayoutAlign=\"row\" class=\"secondary-text font-size-24\">Meet {{ provider?.firstName }}</div>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"showPrivateMessage\" class=\"pt-8\" fxLayout=\"column\">\n      <div *ngIf=\"designatedProvider\" class=\"mb-8\" fxLayout=\"row\">\n        <div fxFlex class=\"bb pb-8 pl-16 mat-title\">Your Counselor</div>\n      </div>\n      <div fxLayout=\"column\" class=\"mb-16\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n          <button mat-icon-button (click)=\"showPrivateMessage = false;\">\n            <mat-icon aria-label=\"Cancel\">arrow_back</mat-icon>\n          </button>\n          <div fxLayoutAlign=\"column\" class=\"mr-8 ml-8\">\n            <img src=\"{{ provider?.imageUrl }}\" style=\"border-radius: 50%; width: 40px; height: 40px;\">\n          </div>\n          <div fxLayoutAlign=\"row\" class=\"secondary-text font-size-24\">Contact {{ provider?.firstName }}</div>\n        </div>\n      </div>\n    </div>\n    <provider-private-message (close)=\"showPrivateMessage = false\" [providerId]=\"provider.id\" *ngIf=\"showPrivateMessage\"></provider-private-message>\n    <provider-rating-widget (saved)=\"onRatingSaved($event)\" *ngIf=\"showRating\" [provider]=\"provider\"></provider-rating-widget>\n    <schedule-availability (appointmentCreated)=\"appointmentCreated($event)\" (availabilityLoaded)=\"onAvailabilityLoaded($event)\" *ngIf=\"showAvailability\" [providerId]=\"provider.id\"></schedule-availability>\n    <provider-details [providerDetails]=\"providerDetails\" *ngIf=\"showDetails\"></provider-details>\n\n    <div *ngIf=\"loaded\" class=\"py-8 grey-50-bg border-top\" fxLayout=\"column\">\n      <mat-nav-list>\n        <mat-list-item (click)=\"showDetails = true\">\n          <mat-icon matListIcon>person</mat-icon>\n          <div matLine>{{ provider?.firstName }}'s Profile</div>\n        </mat-list-item>\n        <mat-list-item (click)=\"showRating = true\">\n          <mat-icon matListIcon>star_rate</mat-icon>\n          <div matLine>Rate {{ provider?.firstName }}</div>\n        </mat-list-item>\n        <mat-list-item (click)=\"showAvailability = true\" *ngIf=\"provider.stripeAccountCreated == true\">\n          <mat-icon matListIcon>date_range</mat-icon>\n          <div matLine>Schedule an Appointment</div>\n        </mat-list-item>\n        <!--<mat-list-item (click)=\"showAvailability = true\" *ngIf=\"provider.stripeAccountCreated == false\">-->\n          <!--<mat-icon matListIcon>date_range</mat-icon>-->\n          <!--<div matLine>Request an Appointment</div>-->\n        <!--</mat-list-item>-->\n        <mat-list-item (click)=\"showPrivateMessage = true\">\n          <mat-icon matListIcon>message</mat-icon>\n          <div matLine>Send a Private Message</div>\n        </mat-list-item>\n      </mat-nav-list>\n    </div>\n  </div>\n</mat-card>\n",
            styles: [".yellow-icon{color:#fdd835}.yellow-icon svg{fill:#fdd835}"]
        })
    ], ProviderWidgetComponent);
    return ProviderWidgetComponent;
}());

var ProviderRatingComponent = /** @class */ (function () {
    function ProviderRatingComponent(providerService, http, snackbar, router, route) {
        this.providerService = providerService;
        this.http = http;
        this.snackbar = snackbar;
        this.router = router;
        this.route = route;
        this.providerId = '';
        this.showWidget = false;
    }
    ProviderRatingComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.route.params.subscribe(function (params) {
            console.log(params);
            if (params.id) {
                _this.providerId = params.id;
            }
            _this.showWidget = true;
        });
    };
    ProviderRatingComponent.ctorParameters = function () { return [
        { type: ProvidersService },
        { type: HttpClient },
        { type: MatSnackBar },
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    ProviderRatingComponent = __decorate([
        Component({
            selector: 'provider-rating',
            template: "<div class=\"page-layout blank p-24\" fusePerfectScrollbar>\n  <provider-rating-widget *ngIf=\"showWidget\" [providerId]=\"providerId\"></provider-rating-widget>\n</div>\n",
            styles: [""]
        })
    ], ProviderRatingComponent);
    return ProviderRatingComponent;
}());

var ProviderRatingItemComponent = /** @class */ (function () {
    function ProviderRatingItemComponent() {
        this.moment = moment;
    }
    ProviderRatingItemComponent.prototype.ngOnInit = function () {
    };
    __decorate([
        Input()
    ], ProviderRatingItemComponent.prototype, "customerRating", void 0);
    ProviderRatingItemComponent = __decorate([
        Component({
            selector: 'provider-rating-item',
            template: "<div class=\"my-16\">\n  <blockquote fxLayout=\"column\">\n    <div class=\"mb-16\">\n      <mat-star-rating\n        [rating]=\"customerRating.rating\"\n        starCount=\"5\"\n        color=\"accent\">\n      </mat-star-rating>\n    </div>\n    <div>\n      {{ customerRating.comments }}\n    </div>\n    <div class=\"secondary-text mt-8\">\n      {{ moment().format('MMMM YYYY')}}\n    </div>\n  </blockquote>\n</div>\n",
            styles: [""]
        })
    ], ProviderRatingItemComponent);
    return ProviderRatingItemComponent;
}());

var CustomerReview = /** @class */ (function () {
    function CustomerReview(input) {
        this.id = input && input.id || '';
        this.range = input && input.range || '';
        this.submittedOn = input && input.submittedOn || '';
        this.rating = input && input.rating || '';
        this.comments = input && input.comments || '';
    }
    return CustomerReview;
}());

var ProviderRatingWidgetComponent = /** @class */ (function () {
    function ProviderRatingWidgetComponent(providerService, http, snackbar, router, route) {
        this.providerService = providerService;
        this.http = http;
        this.snackbar = snackbar;
        this.router = router;
        this.route = route;
        this.providerId = '';
        this.customerId = '';
        this.rating = 0;
        this.ratings = [];
        this.commentFormControl = new FormControl('', [Validators.required]);
        this.loading = false;
        this.loadingReviews = false;
        this.saved = new EventEmitter();
    }
    ProviderRatingWidgetComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.loadingReviews = true;
        this.providerService.getProviderById(this.provider.id)
            .then(function (response) {
            console.log(response);
            _this.provider = response;
        }, function (error) {
            console.log('Error getting provider');
            console.log(error);
        });
        this.providerService.getRatingsForProvider(this.provider.id)
            .then(function (response) {
            console.log('success', response);
            _this.ratings = response;
            _this.loadingReviews = false;
        });
    };
    ProviderRatingWidgetComponent.prototype.onRatingChanged = function (rating) {
        console.log('Changed: ' + rating);
        this.rating = rating;
    };
    ProviderRatingWidgetComponent.prototype.submitRating = function () {
        var _this = this;
        var customerReview = new CustomerReview();
        customerReview.id = this.provider.id;
        customerReview.range = this.customerId;
        customerReview.submittedOn = new Date().getTime();
        customerReview.rating = this.rating;
        customerReview.comments = this.commentFormControl.value;
        var reviewUrl = "https://api-dev.brightpathvt.com/customers/reviews";
        this.loading = true;
        console.log('customerreview', customerReview);
        this.http.post(reviewUrl, customerReview)
            .subscribe(function (response) {
            _this.loading = false;
            _this.snackbar.open('Review Saved', 'OK', {
                verticalPosition: 'top',
                duration: 2000
            });
            // show the success message
            _this.saved.emit(response);
            // this.router.navigateByUrl('/home');
        }, function (error) {
            _this.loading = false;
        }, function () {
            _this.loading = false;
        });
    };
    ProviderRatingWidgetComponent.ctorParameters = function () { return [
        { type: ProvidersService },
        { type: HttpClient },
        { type: MatSnackBar },
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    __decorate([
        Input()
    ], ProviderRatingWidgetComponent.prototype, "provider", void 0);
    __decorate([
        Input()
    ], ProviderRatingWidgetComponent.prototype, "providerId", void 0);
    __decorate([
        Input()
    ], ProviderRatingWidgetComponent.prototype, "customerId", void 0);
    __decorate([
        Output()
    ], ProviderRatingWidgetComponent.prototype, "saved", void 0);
    ProviderRatingWidgetComponent = __decorate([
        Component({
            selector: 'provider-rating-widget',
            template: "<div fxLayout=\"column\" class=\"p-16 orange-50-bg\">\n  <div>\n    1.  On a scale of five stars, how pleased are you with the counseling services you have received from {{ provider?.firstName }}?\n  </div>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\" class=\"mt-16\">\n    <mat-star-rating\n      [rating]=\"rating\"\n      starCount=\"5\"\n      color=\"accent\"\n      (ratingUpdated)=\"onRatingChanged($event)\">\n    </mat-star-rating>\n  </div>\n  <div class=\"mt-16\">\n    2.  Please comment on why you have given {{ provider?.firstName }} the rating above.\n  </div>\n  <div fxLayout=\"row\" class=\"mt-16\">\n    <mat-form-field fxFlex>\n      <textarea placeholder=\"Comments\" matInput [formControl]=\"commentFormControl\"></textarea>\n      <mat-error>\n        Required\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <div fxLayout=\"row\" class=\"mt-16\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"end\" *ngIf=\"loading\">\n      <mat-spinner [diameter]=\"25\"></mat-spinner>\n    </div>\n    <button mat-raised-button (click)=\"submitRating()\" [disabled]=\"loading\">Submit</button>\n  </div>\n</div>\n<div class=\"mt-16 p-16\">\n  <div class=\"mat-title\">\n    Reviews\n  </div>\n  <provider-rating-item *ngFor=\"let rating of ratings\" [customerRating]=\"rating\"></provider-rating-item>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" *ngIf=\"loadingReviews\">\n    <mat-spinner [diameter]=\"25\"></mat-spinner>\n    <div class=\"ml-8\">Loading...</div>\n  </div>\n</div>\n\n",
            styles: [""]
        })
    ], ProviderRatingWidgetComponent);
    return ProviderRatingWidgetComponent;
}());

var ProviderDetailsComponent = /** @class */ (function () {
    function ProviderDetailsComponent(http) {
        this.http = http;
        this.loading = false;
    }
    ProviderDetailsComponent.prototype.ngOnInit = function () {
    };
    ProviderDetailsComponent.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    __decorate([
        Input()
    ], ProviderDetailsComponent.prototype, "providerDetails", void 0);
    ProviderDetailsComponent = __decorate([
        Component({
            selector: 'provider-details',
            template: "<div class=\"px-8\">\n  <div class=\"secondary-text text-bold font-size-16 mb-8\">\n    Bio\n  </div>\n  <div class=\"px-16 mb-16\" [innerHtml]=\"providerDetails.body.description | keepHtml\">\n  </div>\n  <div class=\"mb-16\">\n    <div class=\"secondary-text text-bold font-size-16 mb-8\">Licenses</div>\n    <div class=\"px-16\" *ngFor=\"let currentLicence of providerDetails.body?.licenses\">\n      <div class=\"secondary-text text-bold\">\n        {{ currentLicence.name }}\n      </div>\n      <div fxLayout=\"row\">\n        <div fxFlex=\"25\">\n          State:\n        </div>\n        <div fxFlex=\"25\">\n          {{ currentLicence.state}}\n        </div>\n        <div fxFlex=\"25\">\n          Expires\n        </div>\n        <div fxFlex=\"25\">\n          {{ currentLicence.expiresYear}}\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"secondary-text text-bold font-size-16 mb-8\">\n    Specialties\n  </div>\n  <div>\n    <ul>\n      <li *ngFor=\"let expertise of providerDetails.body?.expertise\">\n        {{ expertise }}\n      </li>\n    </ul>\n  </div>\n\n</div>\n",
            styles: [""]
        })
    ], ProviderDetailsComponent);
    return ProviderDetailsComponent;
}());

var ProviderPrivateMessageComponent = /** @class */ (function () {
    function ProviderPrivateMessageComponent(streamClientService, snackbar) {
        this.streamClientService = streamClientService;
        this.snackbar = snackbar;
        this.close = new EventEmitter();
    }
    ProviderPrivateMessageComponent.prototype.onPrivateMessage = function (privateMessage) {
        var _this = this;
        privateMessage.actor = 'customers:' + this.customerId;
        privateMessage.threadId = UUID.UUID();
        privateMessage.to = ["notification:" + this.providerId];
        privateMessage.target = "inbox:" + this.providerId;
        this.streamClientService.getToken('inbox', this.providerId).then(function (response) {
            var token = response.token;
            _this.streamClientService.addActivity(privateMessage, 'inbox', _this.providerId, token).then(function (privateMessageResponse) {
                _this.snackbar.open('Sent Private Message', 'OK', {
                    verticalPosition: 'top',
                    duration: 2000
                });
            });
            _this.close.emit(true);
        });
    };
    ProviderPrivateMessageComponent.prototype.ngOnInit = function () {
    };
    ProviderPrivateMessageComponent.ctorParameters = function () { return [
        { type: StreamClientService },
        { type: MatSnackBar }
    ]; };
    __decorate([
        Input()
    ], ProviderPrivateMessageComponent.prototype, "customerId", void 0);
    __decorate([
        Input()
    ], ProviderPrivateMessageComponent.prototype, "providerId", void 0);
    __decorate([
        Output()
    ], ProviderPrivateMessageComponent.prototype, "close", void 0);
    ProviderPrivateMessageComponent = __decorate([
        Component({
            selector: 'provider-private-message',
            template: "<div class=\"p-8\">\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"message-box error\">\n    If you are in immediate need of counseling or support, please call 911.  Messages sent to your counselor can take up to 24 hours to be read and replied to\n  </div>\n  <div fxLayout=\"column\">\n    <div fxLayout=\"row\" class=\"mt-16\">\n      <lib-activity-editor (onActivity)=\"onPrivateMessage($event)\" fxFlex></lib-activity-editor>\n    </div>\n  </div>\n</div>\n",
            styles: [""]
        })
    ], ProviderPrivateMessageComponent);
    return ProviderPrivateMessageComponent;
}());

var ProviderSelectComponent = /** @class */ (function () {
    function ProviderSelectComponent(providerService, customerService, streamClient, router) {
        this.providerService = providerService;
        this.customerService = customerService;
        this.streamClient = streamClient;
        this.router = router;
        this.loading = false;
        this.providers = [];
    }
    ProviderSelectComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.customer === null || this.customer === undefined) {
            // load the customer
            this.customerService.loadCustomer(this.customerId).subscribe(function (customerList) {
                if (customerList !== null && customerList.length > 0) {
                    _this.customer = customerList[0];
                }
            });
        }
        this.loadProviders();
    };
    ProviderSelectComponent.prototype.loadProviders = function () {
        var _this = this;
        this.providerService.getAllProviders().then(function (providers) {
            console.log(providers);
            _this.providers = providers;
        });
    };
    ProviderSelectComponent.prototype.onProviderSelected = function (newProvider) {
        var _this = this;
        console.log('the user wants this guy: ', newProvider);
        if (this.customer.preferredProvider !== null && this.customer.preferredProvider !== undefined) {
            // this person is switching providers.  Create an activity and CC it to the old provider's notification stream
            this.streamClient.getToken('timeline', this.customer.id).then(function (response) {
                var token = response.token;
                var activity = new StreamActivity();
                activity.verb = 'cancelprovider';
                activity.actor = "customers:" + _this.customer.id;
                activity.target = "providers:" + _this.customer.preferredProvider;
                activity.to = ["notification:" + _this.customer.preferredProvider];
                activity.object = 'none';
                console.log('about to create the following', activity);
                _this.streamClient.addActivity(activity, 'timeline', _this.customer.id, token);
            });
        }
        this.customer.preferredProvider = newProvider.id;
        // TODO: Need to signal that the preferred provider has changed
        // this.auth.saveAuthIdentityToLocalStorage();
        this.customerService.saveCustomer(this.customer)
            .subscribe(function (response) {
            _this.streamClient.getToken('timeline', _this.customer.id).then(function (tokenresponse) {
                console.log('got the ticket honkey dorey');
                var token = tokenresponse.token;
                var activity = new StreamActivity();
                activity.verb = 'preferredprovider';
                activity.actor = "customers:" + _this.customer.id;
                activity.target = "providers:" + _this.customer.preferredProvider;
                activity.to = ["notification:" + _this.customer.preferredProvider];
                activity.object = 'none';
                console.log('about to create the following', activity);
                _this.streamClient.addActivity(activity, 'timeline', _this.customer.id, token);
                // now follow the new provider
                _this.streamClient.follow(_this.customer.id, 'timeline', _this.customer.preferredProvider, 'providers');
            });
            // TODO: This shouldn't navigate, but should instead emit an event
            _this.router.navigateByUrl('home');
        });
    };
    ProviderSelectComponent.ctorParameters = function () { return [
        { type: ProvidersService },
        { type: CustomerService },
        { type: StreamClientService },
        { type: Router }
    ]; };
    __decorate([
        Input()
    ], ProviderSelectComponent.prototype, "customerId", void 0);
    __decorate([
        Input()
    ], ProviderSelectComponent.prototype, "customer", void 0);
    ProviderSelectComponent = __decorate([
        Component({
            selector: 'provider-select',
            template: "<div fxLayout=\"column\" class=\"page-layout blank p-24\" fxLayoutGap=\"16px\" fusePerfectScrollbar>\n  <div fxLayout=\"row\" fxLayoutWrap fxLayoutGap=\"16px\">\n    <provider-widget (onSelectedProvider)=\"onProviderSelected($event)\" fxFlex=\"25\" class=\"mb-16\" *ngFor=\"let provider of providers\" [provider]=\"provider\"></provider-widget>\n  </div>\n</div>\n",
            styles: [""]
        })
    ], ProviderSelectComponent);
    return ProviderSelectComponent;
}());

var StarRatingComponent = /** @class */ (function () {
    function StarRatingComponent(snackBar) {
        this.snackBar = snackBar;
        this.ratingUpdated = new EventEmitter();
        this.snackBarDuration = 2000;
        this.ratingArr = [];
    }
    StarRatingComponent.prototype.ngOnInit = function () {
        for (var index = 0; index < this.starCount; index++) {
            this.ratingArr.push(index);
        }
    };
    StarRatingComponent.prototype.onClick = function (rating) {
        console.log(rating);
        this.ratingUpdated.emit(rating);
        return false;
    };
    StarRatingComponent.prototype.showRatingLabel = function (level) {
        var result = '';
        switch (level) {
            case 1:
                result = 'Poor';
                break;
            case 2:
                result = 'Not Good';
                break;
            case 3:
                result = 'Fine';
                break;
            case 4:
                result = 'Really Good';
                break;
            case 5:
                result = 'Excellent';
                break;
        }
        return result;
    };
    StarRatingComponent.prototype.showIcon = function (index) {
        if (this.rating >= index + 1) {
            return 'star';
        }
        else {
            return 'star_border';
        }
    };
    StarRatingComponent.ctorParameters = function () { return [
        { type: MatSnackBar }
    ]; };
    __decorate([
        Input('rating')
    ], StarRatingComponent.prototype, "rating", void 0);
    __decorate([
        Input('starCount')
    ], StarRatingComponent.prototype, "starCount", void 0);
    __decorate([
        Input('color')
    ], StarRatingComponent.prototype, "color", void 0);
    __decorate([
        Output()
    ], StarRatingComponent.prototype, "ratingUpdated", void 0);
    StarRatingComponent = __decorate([
        Component({
            selector: 'mat-star-rating',
            template: "<button mat-icon-button [color]=\"color\" *ngFor=\"let ratingId of ratingArr;index as i\" [id]=\"'star_'+i\" (click)=\"onClick(i+1)\" [matTooltip]=\"showRatingLabel(ratingId+1)\" matTooltipPosition=\"above\">\n  <mat-icon class=\"yellow-icon\">\n    {{showIcon(i)}}\n  </mat-icon>\n</button>\n<mat-error *ngIf=\"starCount == null || starCount == 0\">\n  Star count is <strong>required</strong> and cannot be zero\n</mat-error>\n",
            encapsulation: ViewEncapsulation.Emulated,
            styles: ["button{height:20px;width:25px;line-height:20px}.yellow-icon{color:#fdd835}.yellow-icon svg{fill:#fdd835}"]
        })
    ], StarRatingComponent);
    return StarRatingComponent;
}());
var StarRatingColor;
(function (StarRatingColor) {
    StarRatingColor["primary"] = "primary";
    StarRatingColor["accent"] = "accent";
    StarRatingColor["warn"] = "warn";
})(StarRatingColor || (StarRatingColor = {}));

var EscapeHtmlPipe = /** @class */ (function () {
    function EscapeHtmlPipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    EscapeHtmlPipe.prototype.transform = function (content) {
        return this.sanitizer.bypassSecurityTrustHtml(content);
    };
    EscapeHtmlPipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    EscapeHtmlPipe = __decorate([
        Pipe({ name: 'keepHtml', pure: false })
    ], EscapeHtmlPipe);
    return EscapeHtmlPipe;
}());

var ProviderSummaryComponent = /** @class */ (function () {
    function ProviderSummaryComponent(providerService) {
        this.providerService = providerService;
    }
    ProviderSummaryComponent.prototype.ngOnInit = function () {
        var _this = this;
        // console.log('ngOnInit and tplRef === ' + this.tplRef);
        if (this.provider === undefined || this.provider === null) {
            // we need to have a providerId or there's a problem here
            if (this.providerId === undefined || this.providerId === null) {
                this.provider = new Provider({
                    firstName: 'None',
                    lastName: ''
                });
            }
            else {
                this.providerService.getProviderById(this.providerId).then(function (result) {
                    _this.provider = new Provider(result);
                }).catch(function (error) {
                    console.log('An error occurred', error);
                });
            }
        }
    };
    ProviderSummaryComponent.ctorParameters = function () { return [
        { type: ProvidersService }
    ]; };
    __decorate([
        Input()
    ], ProviderSummaryComponent.prototype, "providerId", void 0);
    __decorate([
        Input()
    ], ProviderSummaryComponent.prototype, "provider", void 0);
    __decorate([
        ContentChild(TemplateRef)
    ], ProviderSummaryComponent.prototype, "tplRef", void 0);
    ProviderSummaryComponent = __decorate([
        Component({
            selector: 'provider-provider-summary',
            template: "<ng-template [customTemplate]=\"tplRef\">\n  <div fxLayout=\"row\" fxLayoutGap=\"16px\" *ngIf=\"provider\">\n    <div>\n      <img class=\"avatar huge\" [src]=\"provider.imageUrl\">\n    </div>\n    <div fxFlex fxLayoutAlign=\"start center\" class=\"mat-h1\">\n      {{ provider.firstName }} {{ provider.lastName }}\n    </div>\n  </div>\n</ng-template>\n",
            styles: [""]
        })
    ], ProviderSummaryComponent);
    return ProviderSummaryComponent;
}());

var ProvidersModule = /** @class */ (function () {
    function ProvidersModule() {
    }
    ProvidersModule = __decorate([
        NgModule({
            declarations: [
                ProviderWidgetComponent,
                ProviderRatingComponent,
                ProviderRatingItemComponent,
                ProviderRatingWidgetComponent,
                ProviderDetailsComponent,
                ProviderPrivateMessageComponent,
                ProviderSelectComponent,
                StarRatingComponent,
                EscapeHtmlPipe,
                ProviderSummaryComponent
            ],
            imports: [
                MaterialModule,
                SchedulingModule,
                CommonModule,
                FlexLayoutModule,
                ReactiveFormsModule,
                ActivityStreamModule,
                AuthModule
            ],
            exports: [
                ProviderWidgetComponent,
                ProviderSummaryComponent
            ]
        })
    ], ProvidersModule);
    return ProvidersModule;
}());

/*
 * Public API Surface of providers
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ProviderSummaryComponent, ProvidersModule, ProviderWidgetComponent as ɵa, ProviderRatingComponent as ɵb, ProviderRatingItemComponent as ɵc, ProviderRatingWidgetComponent as ɵd, ProviderDetailsComponent as ɵe, ProviderPrivateMessageComponent as ɵf, ProviderSelectComponent as ɵg, StarRatingComponent as ɵh, EscapeHtmlPipe as ɵi };
//# sourceMappingURL=providers.js.map
