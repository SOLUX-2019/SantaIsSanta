(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@brightpath/common'), require('@brightpath/scheduling'), require('@angular/router'), require('@angular/material/snack-bar'), require('moment'), require('@angular/forms'), require('angular2-uuid'), require('@brightpath/activity-stream'), require('@angular/common'), require('@angular/platform-browser'), require('@angular/flex-layout'), require('auth'), require('common'), require('scheduling'), require('activity-stream')) :
    typeof define === 'function' && define.amd ? define('providers', ['exports', '@angular/core', '@angular/common/http', '@brightpath/common', '@brightpath/scheduling', '@angular/router', '@angular/material/snack-bar', 'moment', '@angular/forms', 'angular2-uuid', '@brightpath/activity-stream', '@angular/common', '@angular/platform-browser', '@angular/flex-layout', 'auth', 'common', 'scheduling', 'activity-stream'], factory) :
    (global = global || self, factory(global.providers = {}, global.ng.core, global.ng.common.http, global.common, global.scheduling, global.ng.router, global.ng.material.snackBar, global.moment, global.ng.forms, global.angular2Uuid, global.activityStream, global.ng.common, global.ng.platformBrowser, global.ng.flexLayout, global.auth, global.common$2, global.scheduling$1, global.activityStream$1));
}(this, (function (exports, core, http, common, scheduling, router, snackBar, moment, forms, angular2Uuid, activityStream, common$1, platformBrowser, flexLayout, auth, common$2, scheduling$1, activityStream$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var ProviderWidgetComponent = /** @class */ (function () {
        function ProviderWidgetComponent(providerService, http, cdr) {
            this.providerService = providerService;
            this.http = http;
            this.cdr = cdr;
            this.provider = new common.Provider({ id: 'unknown' });
            this.designatedProvider = false;
            this.onAppointmentCreated = new core.EventEmitter();
            this.onSelectedProvider = new core.EventEmitter();
            // tslint:disable-next-line:variable-name
            this._showAvailability = false;
            this.availabilityLoaded = false;
            this.showRating = false;
            this.showDetails = false;
            this.showPrivateMessage = false;
            this.loaded = false;
        }
        ProviderWidgetComponent.prototype.selectProvider = function (value) {
            console.log(value);
            if (value.checked) {
                this.onSelectedProvider.emit(this.provider);
            }
        };
        ProviderWidgetComponent.prototype.appointmentCreated = function (appointment) {
            this.onAppointmentCreated.emit(appointment);
        };
        ProviderWidgetComponent.prototype.clearAvailability = function () {
            this.showAvailability = false;
            this.availabilityLoaded = false;
        };
        ProviderWidgetComponent.prototype.onAvailabilityLoaded = function (event) {
            console.log('bam.  loaded');
            this.availabilityLoaded = true;
            this.cdr.detectChanges();
        };
        Object.defineProperty(ProviderWidgetComponent.prototype, "showAvailability", {
            get: function () {
                return this._showAvailability;
            },
            set: function (availability) {
                this._showAvailability = availability;
                this.cdr.detectChanges();
            },
            enumerable: true,
            configurable: true
        });
        ProviderWidgetComponent.prototype.onRatingSaved = function (event) {
            this.showRating = false;
            this.cdr.detectChanges();
        };
        ProviderWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            // load the survey results for the provider
            if (this.provider.id === 'unknown') {
                this.providerService.getProviderById(this.providerId)
                    .then(function (response) {
                    _this.provider = response;
                    _this.cdr.detectChanges();
                }, function (error) {
                    console.log('An error occurred');
                });
            }
            else {
                this.providerId = this.provider.id;
            }
            var surveyUrl = "https://api-dev.brightpathvt.com/providers/surveyresults/" + this.providerId;
            this.http.get(surveyUrl)
                .subscribe(function (response) {
                _this.loaded = true;
                _this.providerDetails = response;
                console.log('details', response);
                // const licenses: any[] = this.providerDetails.licenses;
                // const licenseString = licenses.map((license: any) => {
                //   console.log('license', license);
                //   return license.name;
                // }).join(',');
                // console.log('licenseString', licenseString);
                _this.cdr.detectChanges();
            }, function (error) {
                _this.loaded = true;
                console.log('An error occurred');
                console.log(error);
            });
        };
        ProviderWidgetComponent.ctorParameters = function () { return [
            { type: scheduling.ProvidersService },
            { type: http.HttpClient },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input()
        ], ProviderWidgetComponent.prototype, "provider", void 0);
        __decorate([
            core.Input()
        ], ProviderWidgetComponent.prototype, "providerId", void 0);
        __decorate([
            core.Input()
        ], ProviderWidgetComponent.prototype, "designatedProvider", void 0);
        __decorate([
            core.Output()
        ], ProviderWidgetComponent.prototype, "onAppointmentCreated", void 0);
        __decorate([
            core.Output()
        ], ProviderWidgetComponent.prototype, "onSelectedProvider", void 0);
        ProviderWidgetComponent = __decorate([
            core.Component({
                selector: 'provider-widget',
                template: "<mat-card fxLayout=\"column\" class=\"p-0\">\n\n  <!-- Front -->\n  <div class=\"mat-white-bg mat-elevation-z2\">\n    <div fxLayout=\"row\" *ngIf=\"!designatedProvider\" class=\"p-16 mb-24 bb\">\n      <div class=\"mr-16\">\n        <mat-checkbox (change)=\"selectProvider($event)\"></mat-checkbox>\n      </div>\n      <div fxLayout=\"column\">\n        <div>Choose {{provider?.firstName}} as your preferred provider</div>\n      </div>\n    </div>\n    <div *ngIf=\"!showAvailability && !showRating && !showDetails && !showPrivateMessage\" class=\"mb-8\" fxLayout=\"column\">\n      <div *ngIf=\"designatedProvider\" class=\"font-size-18 text-center p-16 mb-24 bb\">\n        Your Counselor\n      </div>\n      <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n        <div>\n          <img *ngIf=\"loaded\" src=\"{{ provider?.imageUrl }}\" style=\"border-radius: 50%; width: 150px;\">\n          <mat-progress-spinner *ngIf=\"!loaded\" [strokeWidth]=\"4\" [diameter]=\"150\" mode=\"indeterminate\" class=\"mb-16\"></mat-progress-spinner>\n        </div>\n        <div *ngIf=\"loaded\" class=\"mt-24 mb-8\">\n          <div class=\"secondary-text font-size-18\">{{ provider?.firstName }} {{ provider?.lastName }}</div>\n        </div>\n        <div *ngIf=\"loaded\" class=\"text-center mb-16\" fxLayoutAlign=\"row\">\n          <mat-icon class=\"yellow-icon\">star</mat-icon>\n          <mat-icon class=\"yellow-icon\">star</mat-icon>\n          <mat-icon class=\"yellow-icon\">star</mat-icon>\n          <mat-icon class=\"yellow-icon\">star</mat-icon>\n          <mat-icon class=\"yellow-icon\">star</mat-icon>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"showAvailability\" class=\"pt-8\" fxLayout=\"column\">\n      <div  *ngIf=\"designatedProvider\" class=\"mb-8\" fxLayout=\"row\">\n        <div fxFlex class=\"bb pb-8 pl-16 mat-title\">Your Counselor</div>\n      </div>\n      <div fxLayout=\"column\" class=\"mb-16\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n          <mat-spinner class=\"ml-8 mr-8\" *ngIf=\"!availabilityLoaded\" [diameter]=\"25\"></mat-spinner>\n          <button *ngIf=\"availabilityLoaded\" mat-icon-button (click)=\"clearAvailability()\">\n            <mat-icon aria-label=\"Example icon-button with a heart icon\">arrow_back</mat-icon>\n          </button>\n          <div fxLayoutAlign=\"column\" class=\"mr-8 ml-8\">\n            <img src=\"{{ provider?.imageUrl }}\" style=\"border-radius: 50%; width: 40px; height: 40px;\">\n          </div>\n          <div fxLayout=\"column\">\n            <div class=\"secondary-text font-size-18 line-height-14\">{{ provider?.firstName }}</div>\n            <div class=\"secondary-text font-size-24\">{{ provider?.lastName }}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"showRating\" class=\"pt-8\" fxLayout=\"column\">\n      <div *ngIf=\"designatedProvider\" class=\"mb-8\" fxLayout=\"row\">\n        <div fxFlex class=\"bb pb-8 pl-16 mat-title\">Your Counselor</div>\n      </div>\n      <div fxLayout=\"column\" class=\"mb-16\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n          <button mat-icon-button (click)=\"showRating = false;\">\n            <mat-icon aria-label=\"Cancel\">arrow_back</mat-icon>\n          </button>\n          <div fxLayoutAlign=\"column\" class=\"mr-8 ml-8\">\n            <img src=\"{{ provider?.imageUrl }}\" style=\"border-radius: 50%; width: 40px; height: 40px;\">\n          </div>\n          <div fxLayoutAlign=\"row\" class=\"secondary-text font-size-24\">Rate {{ provider?.firstName }}</div>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"showDetails\" class=\"pt-8\" fxLayout=\"column\">\n      <div *ngIf=\"designatedProvider\" class=\"mb-8\" fxLayout=\"row\">\n        <div fxFlex class=\"bb pb-8 pl-16 mat-title\">Your Counselor</div>\n      </div>\n      <div fxLayout=\"column\" class=\"mb-16\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n          <button mat-icon-button (click)=\"showDetails = false;\">\n            <mat-icon aria-label=\"Cancel\">arrow_back</mat-icon>\n          </button>\n          <div fxLayoutAlign=\"column\" class=\"mr-8 ml-8\">\n            <img src=\"{{ provider?.imageUrl }}\" style=\"border-radius: 50%; width: 40px; height: 40px;\">\n          </div>\n          <div fxLayoutAlign=\"row\" class=\"secondary-text font-size-24\">Meet {{ provider?.firstName }}</div>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"showPrivateMessage\" class=\"pt-8\" fxLayout=\"column\">\n      <div *ngIf=\"designatedProvider\" class=\"mb-8\" fxLayout=\"row\">\n        <div fxFlex class=\"bb pb-8 pl-16 mat-title\">Your Counselor</div>\n      </div>\n      <div fxLayout=\"column\" class=\"mb-16\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n          <button mat-icon-button (click)=\"showPrivateMessage = false;\">\n            <mat-icon aria-label=\"Cancel\">arrow_back</mat-icon>\n          </button>\n          <div fxLayoutAlign=\"column\" class=\"mr-8 ml-8\">\n            <img src=\"{{ provider?.imageUrl }}\" style=\"border-radius: 50%; width: 40px; height: 40px;\">\n          </div>\n          <div fxLayoutAlign=\"row\" class=\"secondary-text font-size-24\">Contact {{ provider?.firstName }}</div>\n        </div>\n      </div>\n    </div>\n    <provider-private-message (close)=\"showPrivateMessage = false\" [providerId]=\"provider.id\" *ngIf=\"showPrivateMessage\"></provider-private-message>\n    <provider-rating-widget (saved)=\"onRatingSaved($event)\" *ngIf=\"showRating\" [provider]=\"provider\"></provider-rating-widget>\n    <schedule-availability (appointmentCreated)=\"appointmentCreated($event)\" (availabilityLoaded)=\"onAvailabilityLoaded($event)\" *ngIf=\"showAvailability\" [providerId]=\"provider.id\"></schedule-availability>\n    <provider-details [providerDetails]=\"providerDetails\" *ngIf=\"showDetails\"></provider-details>\n\n    <div *ngIf=\"loaded\" class=\"py-8 grey-50-bg border-top\" fxLayout=\"column\">\n      <mat-nav-list>\n        <mat-list-item (click)=\"showDetails = true\">\n          <mat-icon matListIcon>person</mat-icon>\n          <div matLine>{{ provider?.firstName }}'s Profile</div>\n        </mat-list-item>\n        <mat-list-item (click)=\"showRating = true\">\n          <mat-icon matListIcon>star_rate</mat-icon>\n          <div matLine>Rate {{ provider?.firstName }}</div>\n        </mat-list-item>\n        <mat-list-item (click)=\"showAvailability = true\" *ngIf=\"provider.stripeAccountCreated == true\">\n          <mat-icon matListIcon>date_range</mat-icon>\n          <div matLine>Schedule an Appointment</div>\n        </mat-list-item>\n        <!--<mat-list-item (click)=\"showAvailability = true\" *ngIf=\"provider.stripeAccountCreated == false\">-->\n          <!--<mat-icon matListIcon>date_range</mat-icon>-->\n          <!--<div matLine>Request an Appointment</div>-->\n        <!--</mat-list-item>-->\n        <mat-list-item (click)=\"showPrivateMessage = true\">\n          <mat-icon matListIcon>message</mat-icon>\n          <div matLine>Send a Private Message</div>\n        </mat-list-item>\n      </mat-nav-list>\n    </div>\n  </div>\n</mat-card>\n",
                styles: [".yellow-icon{color:#fdd835}.yellow-icon svg{fill:#fdd835}"]
            })
        ], ProviderWidgetComponent);
        return ProviderWidgetComponent;
    }());

    var ProviderRatingComponent = /** @class */ (function () {
        function ProviderRatingComponent(providerService, http, snackbar, router, route) {
            this.providerService = providerService;
            this.http = http;
            this.snackbar = snackbar;
            this.router = router;
            this.route = route;
            this.providerId = '';
            this.showWidget = false;
        }
        ProviderRatingComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.route.params.subscribe(function (params) {
                console.log(params);
                if (params.id) {
                    _this.providerId = params.id;
                }
                _this.showWidget = true;
            });
        };
        ProviderRatingComponent.ctorParameters = function () { return [
            { type: scheduling.ProvidersService },
            { type: http.HttpClient },
            { type: snackBar.MatSnackBar },
            { type: router.Router },
            { type: router.ActivatedRoute }
        ]; };
        ProviderRatingComponent = __decorate([
            core.Component({
                selector: 'provider-rating',
                template: "<div class=\"page-layout blank p-24\" fusePerfectScrollbar>\n  <provider-rating-widget *ngIf=\"showWidget\" [providerId]=\"providerId\"></provider-rating-widget>\n</div>\n",
                styles: [""]
            })
        ], ProviderRatingComponent);
        return ProviderRatingComponent;
    }());

    var ProviderRatingItemComponent = /** @class */ (function () {
        function ProviderRatingItemComponent() {
            this.moment = moment;
        }
        ProviderRatingItemComponent.prototype.ngOnInit = function () {
        };
        __decorate([
            core.Input()
        ], ProviderRatingItemComponent.prototype, "customerRating", void 0);
        ProviderRatingItemComponent = __decorate([
            core.Component({
                selector: 'provider-rating-item',
                template: "<div class=\"my-16\">\n  <blockquote fxLayout=\"column\">\n    <div class=\"mb-16\">\n      <mat-star-rating\n        [rating]=\"customerRating.rating\"\n        starCount=\"5\"\n        color=\"accent\">\n      </mat-star-rating>\n    </div>\n    <div>\n      {{ customerRating.comments }}\n    </div>\n    <div class=\"secondary-text mt-8\">\n      {{ moment().format('MMMM YYYY')}}\n    </div>\n  </blockquote>\n</div>\n",
                styles: [""]
            })
        ], ProviderRatingItemComponent);
        return ProviderRatingItemComponent;
    }());

    var CustomerReview = /** @class */ (function () {
        function CustomerReview(input) {
            this.id = input && input.id || '';
            this.range = input && input.range || '';
            this.submittedOn = input && input.submittedOn || '';
            this.rating = input && input.rating || '';
            this.comments = input && input.comments || '';
        }
        return CustomerReview;
    }());

    var ProviderRatingWidgetComponent = /** @class */ (function () {
        function ProviderRatingWidgetComponent(providerService, http, snackbar, router, route) {
            this.providerService = providerService;
            this.http = http;
            this.snackbar = snackbar;
            this.router = router;
            this.route = route;
            this.providerId = '';
            this.customerId = '';
            this.rating = 0;
            this.ratings = [];
            this.commentFormControl = new forms.FormControl('', [forms.Validators.required]);
            this.loading = false;
            this.loadingReviews = false;
            this.saved = new core.EventEmitter();
        }
        ProviderRatingWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.loadingReviews = true;
            this.providerService.getProviderById(this.provider.id)
                .then(function (response) {
                console.log(response);
                _this.provider = response;
            }, function (error) {
                console.log('Error getting provider');
                console.log(error);
            });
            this.providerService.getRatingsForProvider(this.provider.id)
                .then(function (response) {
                console.log('success', response);
                _this.ratings = response;
                _this.loadingReviews = false;
            });
        };
        ProviderRatingWidgetComponent.prototype.onRatingChanged = function (rating) {
            console.log('Changed: ' + rating);
            this.rating = rating;
        };
        ProviderRatingWidgetComponent.prototype.submitRating = function () {
            var _this = this;
            var customerReview = new CustomerReview();
            customerReview.id = this.provider.id;
            customerReview.range = this.customerId;
            customerReview.submittedOn = new Date().getTime();
            customerReview.rating = this.rating;
            customerReview.comments = this.commentFormControl.value;
            var reviewUrl = "https://api-dev.brightpathvt.com/customers/reviews";
            this.loading = true;
            console.log('customerreview', customerReview);
            this.http.post(reviewUrl, customerReview)
                .subscribe(function (response) {
                _this.loading = false;
                _this.snackbar.open('Review Saved', 'OK', {
                    verticalPosition: 'top',
                    duration: 2000
                });
                // show the success message
                _this.saved.emit(response);
                // this.router.navigateByUrl('/home');
            }, function (error) {
                _this.loading = false;
            }, function () {
                _this.loading = false;
            });
        };
        ProviderRatingWidgetComponent.ctorParameters = function () { return [
            { type: scheduling.ProvidersService },
            { type: http.HttpClient },
            { type: snackBar.MatSnackBar },
            { type: router.Router },
            { type: router.ActivatedRoute }
        ]; };
        __decorate([
            core.Input()
        ], ProviderRatingWidgetComponent.prototype, "provider", void 0);
        __decorate([
            core.Input()
        ], ProviderRatingWidgetComponent.prototype, "providerId", void 0);
        __decorate([
            core.Input()
        ], ProviderRatingWidgetComponent.prototype, "customerId", void 0);
        __decorate([
            core.Output()
        ], ProviderRatingWidgetComponent.prototype, "saved", void 0);
        ProviderRatingWidgetComponent = __decorate([
            core.Component({
                selector: 'provider-rating-widget',
                template: "<div fxLayout=\"column\" class=\"p-16 orange-50-bg\">\n  <div>\n    1.  On a scale of five stars, how pleased are you with the counseling services you have received from {{ provider?.firstName }}?\n  </div>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\" class=\"mt-16\">\n    <mat-star-rating\n      [rating]=\"rating\"\n      starCount=\"5\"\n      color=\"accent\"\n      (ratingUpdated)=\"onRatingChanged($event)\">\n    </mat-star-rating>\n  </div>\n  <div class=\"mt-16\">\n    2.  Please comment on why you have given {{ provider?.firstName }} the rating above.\n  </div>\n  <div fxLayout=\"row\" class=\"mt-16\">\n    <mat-form-field fxFlex>\n      <textarea placeholder=\"Comments\" matInput [formControl]=\"commentFormControl\"></textarea>\n      <mat-error>\n        Required\n      </mat-error>\n    </mat-form-field>\n  </div>\n  <div fxLayout=\"row\" class=\"mt-16\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"end\" *ngIf=\"loading\">\n      <mat-spinner [diameter]=\"25\"></mat-spinner>\n    </div>\n    <button mat-raised-button (click)=\"submitRating()\" [disabled]=\"loading\">Submit</button>\n  </div>\n</div>\n<div class=\"mt-16 p-16\">\n  <div class=\"mat-title\">\n    Reviews\n  </div>\n  <provider-rating-item *ngFor=\"let rating of ratings\" [customerRating]=\"rating\"></provider-rating-item>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" *ngIf=\"loadingReviews\">\n    <mat-spinner [diameter]=\"25\"></mat-spinner>\n    <div class=\"ml-8\">Loading...</div>\n  </div>\n</div>\n\n",
                styles: [""]
            })
        ], ProviderRatingWidgetComponent);
        return ProviderRatingWidgetComponent;
    }());

    var ProviderDetailsComponent = /** @class */ (function () {
        function ProviderDetailsComponent(http) {
            this.http = http;
            this.loading = false;
        }
        ProviderDetailsComponent.prototype.ngOnInit = function () {
        };
        ProviderDetailsComponent.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        __decorate([
            core.Input()
        ], ProviderDetailsComponent.prototype, "providerDetails", void 0);
        ProviderDetailsComponent = __decorate([
            core.Component({
                selector: 'provider-details',
                template: "<div class=\"px-8\">\n  <div class=\"secondary-text text-bold font-size-16 mb-8\">\n    Bio\n  </div>\n  <div class=\"px-16 mb-16\" [innerHtml]=\"providerDetails.body.description | keepHtml\">\n  </div>\n  <div class=\"mb-16\">\n    <div class=\"secondary-text text-bold font-size-16 mb-8\">Licenses</div>\n    <div class=\"px-16\" *ngFor=\"let currentLicence of providerDetails.body?.licenses\">\n      <div class=\"secondary-text text-bold\">\n        {{ currentLicence.name }}\n      </div>\n      <div fxLayout=\"row\">\n        <div fxFlex=\"25\">\n          State:\n        </div>\n        <div fxFlex=\"25\">\n          {{ currentLicence.state}}\n        </div>\n        <div fxFlex=\"25\">\n          Expires\n        </div>\n        <div fxFlex=\"25\">\n          {{ currentLicence.expiresYear}}\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"secondary-text text-bold font-size-16 mb-8\">\n    Specialties\n  </div>\n  <div>\n    <ul>\n      <li *ngFor=\"let expertise of providerDetails.body?.expertise\">\n        {{ expertise }}\n      </li>\n    </ul>\n  </div>\n\n</div>\n",
                styles: [""]
            })
        ], ProviderDetailsComponent);
        return ProviderDetailsComponent;
    }());

    var ProviderPrivateMessageComponent = /** @class */ (function () {
        function ProviderPrivateMessageComponent(streamClientService, snackbar) {
            this.streamClientService = streamClientService;
            this.snackbar = snackbar;
            this.close = new core.EventEmitter();
        }
        ProviderPrivateMessageComponent.prototype.onPrivateMessage = function (privateMessage) {
            var _this = this;
            privateMessage.actor = 'customers:' + this.customerId;
            privateMessage.threadId = angular2Uuid.UUID.UUID();
            privateMessage.to = ["notification:" + this.providerId];
            privateMessage.target = "inbox:" + this.providerId;
            this.streamClientService.getToken('inbox', this.providerId).then(function (response) {
                var token = response.token;
                _this.streamClientService.addActivity(privateMessage, 'inbox', _this.providerId, token).then(function (privateMessageResponse) {
                    _this.snackbar.open('Sent Private Message', 'OK', {
                        verticalPosition: 'top',
                        duration: 2000
                    });
                });
                _this.close.emit(true);
            });
        };
        ProviderPrivateMessageComponent.prototype.ngOnInit = function () {
        };
        ProviderPrivateMessageComponent.ctorParameters = function () { return [
            { type: activityStream.StreamClientService },
            { type: snackBar.MatSnackBar }
        ]; };
        __decorate([
            core.Input()
        ], ProviderPrivateMessageComponent.prototype, "customerId", void 0);
        __decorate([
            core.Input()
        ], ProviderPrivateMessageComponent.prototype, "providerId", void 0);
        __decorate([
            core.Output()
        ], ProviderPrivateMessageComponent.prototype, "close", void 0);
        ProviderPrivateMessageComponent = __decorate([
            core.Component({
                selector: 'provider-private-message',
                template: "<div class=\"p-8\">\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"message-box error\">\n    If you are in immediate need of counseling or support, please call 911.  Messages sent to your counselor can take up to 24 hours to be read and replied to\n  </div>\n  <div fxLayout=\"column\">\n    <div fxLayout=\"row\" class=\"mt-16\">\n      <lib-activity-editor (onActivity)=\"onPrivateMessage($event)\" fxFlex></lib-activity-editor>\n    </div>\n  </div>\n</div>\n",
                styles: [""]
            })
        ], ProviderPrivateMessageComponent);
        return ProviderPrivateMessageComponent;
    }());

    var ProviderSelectComponent = /** @class */ (function () {
        function ProviderSelectComponent(providerService, customerService, streamClient, router) {
            this.providerService = providerService;
            this.customerService = customerService;
            this.streamClient = streamClient;
            this.router = router;
            this.loading = false;
            this.providers = [];
        }
        ProviderSelectComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.customer === null || this.customer === undefined) {
                // load the customer
                this.customerService.loadCustomer(this.customerId).subscribe(function (customerList) {
                    if (customerList !== null && customerList.length > 0) {
                        _this.customer = customerList[0];
                    }
                });
            }
            this.loadProviders();
        };
        ProviderSelectComponent.prototype.loadProviders = function () {
            var _this = this;
            this.providerService.getAllProviders().then(function (providers) {
                console.log(providers);
                _this.providers = providers;
            });
        };
        ProviderSelectComponent.prototype.onProviderSelected = function (newProvider) {
            var _this = this;
            console.log('the user wants this guy: ', newProvider);
            if (this.customer.preferredProvider !== null && this.customer.preferredProvider !== undefined) {
                // this person is switching providers.  Create an activity and CC it to the old provider's notification stream
                this.streamClient.getToken('timeline', this.customer.id).then(function (response) {
                    var token = response.token;
                    var activity = new activityStream.StreamActivity();
                    activity.verb = 'cancelprovider';
                    activity.actor = "customers:" + _this.customer.id;
                    activity.target = "providers:" + _this.customer.preferredProvider;
                    activity.to = ["notification:" + _this.customer.preferredProvider];
                    activity.object = 'none';
                    console.log('about to create the following', activity);
                    _this.streamClient.addActivity(activity, 'timeline', _this.customer.id, token);
                });
            }
            this.customer.preferredProvider = newProvider.id;
            // TODO: Need to signal that the preferred provider has changed
            // this.auth.saveAuthIdentityToLocalStorage();
            this.customerService.saveCustomer(this.customer)
                .subscribe(function (response) {
                _this.streamClient.getToken('timeline', _this.customer.id).then(function (tokenresponse) {
                    console.log('got the ticket honkey dorey');
                    var token = tokenresponse.token;
                    var activity = new activityStream.StreamActivity();
                    activity.verb = 'preferredprovider';
                    activity.actor = "customers:" + _this.customer.id;
                    activity.target = "providers:" + _this.customer.preferredProvider;
                    activity.to = ["notification:" + _this.customer.preferredProvider];
                    activity.object = 'none';
                    console.log('about to create the following', activity);
                    _this.streamClient.addActivity(activity, 'timeline', _this.customer.id, token);
                    // now follow the new provider
                    _this.streamClient.follow(_this.customer.id, 'timeline', _this.customer.preferredProvider, 'providers');
                });
                // TODO: This shouldn't navigate, but should instead emit an event
                _this.router.navigateByUrl('home');
            });
        };
        ProviderSelectComponent.ctorParameters = function () { return [
            { type: scheduling.ProvidersService },
            { type: scheduling.CustomerService },
            { type: activityStream.StreamClientService },
            { type: router.Router }
        ]; };
        __decorate([
            core.Input()
        ], ProviderSelectComponent.prototype, "customerId", void 0);
        __decorate([
            core.Input()
        ], ProviderSelectComponent.prototype, "customer", void 0);
        ProviderSelectComponent = __decorate([
            core.Component({
                selector: 'provider-select',
                template: "<div fxLayout=\"column\" class=\"page-layout blank p-24\" fxLayoutGap=\"16px\" fusePerfectScrollbar>\n  <div fxLayout=\"row\" fxLayoutWrap fxLayoutGap=\"16px\">\n    <provider-widget (onSelectedProvider)=\"onProviderSelected($event)\" fxFlex=\"25\" class=\"mb-16\" *ngFor=\"let provider of providers\" [provider]=\"provider\"></provider-widget>\n  </div>\n</div>\n",
                styles: [""]
            })
        ], ProviderSelectComponent);
        return ProviderSelectComponent;
    }());

    var StarRatingComponent = /** @class */ (function () {
        function StarRatingComponent(snackBar) {
            this.snackBar = snackBar;
            this.ratingUpdated = new core.EventEmitter();
            this.snackBarDuration = 2000;
            this.ratingArr = [];
        }
        StarRatingComponent.prototype.ngOnInit = function () {
            for (var index = 0; index < this.starCount; index++) {
                this.ratingArr.push(index);
            }
        };
        StarRatingComponent.prototype.onClick = function (rating) {
            console.log(rating);
            this.ratingUpdated.emit(rating);
            return false;
        };
        StarRatingComponent.prototype.showRatingLabel = function (level) {
            var result = '';
            switch (level) {
                case 1:
                    result = 'Poor';
                    break;
                case 2:
                    result = 'Not Good';
                    break;
                case 3:
                    result = 'Fine';
                    break;
                case 4:
                    result = 'Really Good';
                    break;
                case 5:
                    result = 'Excellent';
                    break;
            }
            return result;
        };
        StarRatingComponent.prototype.showIcon = function (index) {
            if (this.rating >= index + 1) {
                return 'star';
            }
            else {
                return 'star_border';
            }
        };
        StarRatingComponent.ctorParameters = function () { return [
            { type: snackBar.MatSnackBar }
        ]; };
        __decorate([
            core.Input('rating')
        ], StarRatingComponent.prototype, "rating", void 0);
        __decorate([
            core.Input('starCount')
        ], StarRatingComponent.prototype, "starCount", void 0);
        __decorate([
            core.Input('color')
        ], StarRatingComponent.prototype, "color", void 0);
        __decorate([
            core.Output()
        ], StarRatingComponent.prototype, "ratingUpdated", void 0);
        StarRatingComponent = __decorate([
            core.Component({
                selector: 'mat-star-rating',
                template: "<button mat-icon-button [color]=\"color\" *ngFor=\"let ratingId of ratingArr;index as i\" [id]=\"'star_'+i\" (click)=\"onClick(i+1)\" [matTooltip]=\"showRatingLabel(ratingId+1)\" matTooltipPosition=\"above\">\n  <mat-icon class=\"yellow-icon\">\n    {{showIcon(i)}}\n  </mat-icon>\n</button>\n<mat-error *ngIf=\"starCount == null || starCount == 0\">\n  Star count is <strong>required</strong> and cannot be zero\n</mat-error>\n",
                encapsulation: core.ViewEncapsulation.Emulated,
                styles: ["button{height:20px;width:25px;line-height:20px}.yellow-icon{color:#fdd835}.yellow-icon svg{fill:#fdd835}"]
            })
        ], StarRatingComponent);
        return StarRatingComponent;
    }());
    var StarRatingColor;
    (function (StarRatingColor) {
        StarRatingColor["primary"] = "primary";
        StarRatingColor["accent"] = "accent";
        StarRatingColor["warn"] = "warn";
    })(StarRatingColor || (StarRatingColor = {}));

    var EscapeHtmlPipe = /** @class */ (function () {
        function EscapeHtmlPipe(sanitizer) {
            this.sanitizer = sanitizer;
        }
        EscapeHtmlPipe.prototype.transform = function (content) {
            return this.sanitizer.bypassSecurityTrustHtml(content);
        };
        EscapeHtmlPipe.ctorParameters = function () { return [
            { type: platformBrowser.DomSanitizer }
        ]; };
        EscapeHtmlPipe = __decorate([
            core.Pipe({ name: 'keepHtml', pure: false })
        ], EscapeHtmlPipe);
        return EscapeHtmlPipe;
    }());

    var ProviderSummaryComponent = /** @class */ (function () {
        function ProviderSummaryComponent(providerService) {
            this.providerService = providerService;
        }
        ProviderSummaryComponent.prototype.ngOnInit = function () {
            var _this = this;
            // console.log('ngOnInit and tplRef === ' + this.tplRef);
            if (this.provider === undefined || this.provider === null) {
                // we need to have a providerId or there's a problem here
                if (this.providerId === undefined || this.providerId === null) {
                    this.provider = new common.Provider({
                        firstName: 'None',
                        lastName: ''
                    });
                }
                else {
                    this.providerService.getProviderById(this.providerId).then(function (result) {
                        _this.provider = new common.Provider(result);
                    }).catch(function (error) {
                        console.log('An error occurred', error);
                    });
                }
            }
        };
        ProviderSummaryComponent.ctorParameters = function () { return [
            { type: scheduling.ProvidersService }
        ]; };
        __decorate([
            core.Input()
        ], ProviderSummaryComponent.prototype, "providerId", void 0);
        __decorate([
            core.Input()
        ], ProviderSummaryComponent.prototype, "provider", void 0);
        __decorate([
            core.ContentChild(core.TemplateRef)
        ], ProviderSummaryComponent.prototype, "tplRef", void 0);
        ProviderSummaryComponent = __decorate([
            core.Component({
                selector: 'provider-provider-summary',
                template: "<ng-template [customTemplate]=\"tplRef\">\n  <div fxLayout=\"row\" fxLayoutGap=\"16px\" *ngIf=\"provider\">\n    <div>\n      <img class=\"avatar huge\" [src]=\"provider.imageUrl\">\n    </div>\n    <div fxFlex fxLayoutAlign=\"start center\" class=\"mat-h1\">\n      {{ provider.firstName }} {{ provider.lastName }}\n    </div>\n  </div>\n</ng-template>\n",
                styles: [""]
            })
        ], ProviderSummaryComponent);
        return ProviderSummaryComponent;
    }());

    var ProvidersModule = /** @class */ (function () {
        function ProvidersModule() {
        }
        ProvidersModule = __decorate([
            core.NgModule({
                declarations: [
                    ProviderWidgetComponent,
                    ProviderRatingComponent,
                    ProviderRatingItemComponent,
                    ProviderRatingWidgetComponent,
                    ProviderDetailsComponent,
                    ProviderPrivateMessageComponent,
                    ProviderSelectComponent,
                    StarRatingComponent,
                    EscapeHtmlPipe,
                    ProviderSummaryComponent
                ],
                imports: [
                    common$2.MaterialModule,
                    scheduling$1.SchedulingModule,
                    common$1.CommonModule,
                    flexLayout.FlexLayoutModule,
                    forms.ReactiveFormsModule,
                    activityStream$1.ActivityStreamModule,
                    auth.AuthModule
                ],
                exports: [
                    ProviderWidgetComponent,
                    ProviderSummaryComponent
                ]
            })
        ], ProvidersModule);
        return ProvidersModule;
    }());

    exports.ProviderSummaryComponent = ProviderSummaryComponent;
    exports.ProvidersModule = ProvidersModule;
    exports.ɵa = ProviderWidgetComponent;
    exports.ɵb = ProviderRatingComponent;
    exports.ɵc = ProviderRatingItemComponent;
    exports.ɵd = ProviderRatingWidgetComponent;
    exports.ɵe = ProviderDetailsComponent;
    exports.ɵf = ProviderPrivateMessageComponent;
    exports.ɵg = ProviderSelectComponent;
    exports.ɵh = StarRatingComponent;
    exports.ɵi = EscapeHtmlPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=providers.umd.js.map
